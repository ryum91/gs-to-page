{"version":3,"sources":["views/CardView.tsx","views/ListView.tsx","GeneratePage.tsx","App.tsx","index.tsx"],"names":["CardView","dataRows","headerColors","appendFilter","align","wrap","map","data","index","title","name","size","actions","PlayCircleOutlined","onClick","window","location","href","link","CopyOutlined","copy","alert","Object","keys","filter","key","undefined","categoryKey","style","cursor","color","ListView","bordered","dataSource","renderItem","item","Item","Meta","description","GeneratePage","useState","id","setId","setKey","output","setOutput","handleClick","useCallback","inputId","inputKey","e","className","value","onChange","target","placeholder","width","params","URLSearchParams","search","get","viewParam","colorSets","App","setTitle","headers","setHeaders","setDataRows","filters","setFilters","view","setView","init","a","docs","GoogleSpreadsheet","useApiKey","loadInfo","document","sheet","sheetsByIndex","getRows","rows","headerValues","row","result","forEach","header","useLayoutEffect","catch","origin","pathname","filteredHeaders","useMemo","reduce","prev","some","entries","targetKey","targetValue","removeFilter","filteredDataRow","length","dataRow","every","filterKey","filterValue","toggleView","closable","onClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.51f99bde.chunk.js","sourcesContent":["import { Card, Space, Tag } from 'antd';\nimport { CopyOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport copy from 'copy-to-clipboard';\n\ninterface Props {\n  dataRows: Record<string, string>[];\n  headerColors: Record<string, string>;\n  appendFilter: (key: string, value: string) => void;\n}\n\nexport const CardView = ({ dataRows, headerColors, appendFilter }: Props) => {\n  return (\n    <Space align=\"center\" wrap>\n      {dataRows.map((data, index) => {\n        return (\n          <Card\n            key={index}\n            title={data.name}\n            size=\"small\"\n            actions={[\n              <PlayCircleOutlined\n                key=\"이동\"\n                onClick={() => {\n                  window.location.href = data.link;\n                }}\n              />,\n              <CopyOutlined\n                key=\"복사\"\n                onClick={() => {\n                  copy(data.link);\n                  window.alert(`복사되었습니다.\\n\\n${data.link}`);\n                }}\n              />,\n            ]}\n          >\n            {Object.keys(data)\n              .filter(\n                (key) =>\n                  key !== '' &&\n                  key !== 'name' &&\n                  key !== 'link' &&\n                  data[key] !== undefined\n              )\n              .map((categoryKey) => {\n                return (\n                  <Tag\n                    key={categoryKey}\n                    style={{ cursor: 'pointer' }}\n                    color={headerColors[categoryKey]}\n                    onClick={() => appendFilter(categoryKey, data[categoryKey])}\n                  >\n                    {data[categoryKey]}\n                  </Tag>\n                );\n              })}\n          </Card>\n        );\n      })}\n    </Space>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { List, Tag } from 'antd';\nimport copy from 'copy-to-clipboard';\n\ninterface Props {\n  dataRows: Record<string, string>[];\n  headerColors: Record<string, string>;\n  appendFilter: (key: string, value: string) => void;\n}\n\nexport const ListView = ({ dataRows, headerColors, appendFilter }: Props) => {\n  return (\n    <List\n      bordered\n      dataSource={dataRows}\n      renderItem={(item) => (\n        <List.Item\n          actions={[\n            <a\n              key=\"이동\"\n              onClick={() => {\n                window.location.href = item.link;\n              }}\n            >\n              바로가기\n            </a>,\n            <a\n              key=\"복사\"\n              onClick={() => {\n                copy(item.link);\n                window.alert(`복사되었습니다.\\n\\n${item.link}`);\n              }}\n            >\n              복사\n            </a>,\n          ]}\n        >\n          <List.Item.Meta\n            title={item.name}\n            description={Object.keys(item)\n              .filter(\n                (key) =>\n                  key !== '' &&\n                  key !== 'name' &&\n                  key !== 'link' &&\n                  item[key] !== undefined\n              )\n              .map((categoryKey) => {\n                return (\n                  <Tag\n                    key={categoryKey}\n                    style={{ cursor: 'pointer' }}\n                    color={headerColors[categoryKey]}\n                    onClick={() => appendFilter(categoryKey, item[categoryKey])}\n                  >\n                    {item[categoryKey]}\n                  </Tag>\n                );\n              })}\n          />\n        </List.Item>\n      )}\n    />\n  );\n};\n","import { Input, Button } from 'antd';\nimport copy from 'copy-to-clipboard';\nimport { useCallback, useState } from 'react';\n\nexport const GeneratePage = () => {\n  const [id, setId] = useState<string>('');\n  const [key, setKey] = useState<string>('');\n\n  const [output, setOutput] = useState<string>('');\n\n  const handleClick = useCallback((inputId: string, inputKey: string) => {\n    try {\n      setOutput(\n        `${window.location.href}?id=${inputId}${inputKey && `&key=${inputKey}`}`\n      );\n      window.alert('생성되었습니다.');\n    } catch (e) {\n      window.alert('값이 입력되지 않았거나, 잘못되었습니다.');\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Google SpreadSheet 페이지 만들기</h1>\n      </div>\n      <div className=\"contents\">\n        <Input\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          placeholder=\"Google SpreadSheet ID\"\n        ></Input>\n        <br />\n        <br />\n        <Input\n          value={key}\n          onChange={(e) => setKey(e.target.value)}\n          placeholder=\"API Key (Optional)\"\n        ></Input>\n        <br />키 발급:{' '}\n        <a href=\"https://console.cloud.google.com/apis/credentials\">\n          Google Cloud Platform\n        </a>\n        <br />\n        <br />\n        <Button style={{ width: '100%' }} onClick={() => handleClick(id, key)}>\n          생성\n        </Button>\n        <br />\n        <br />\n        {!!output && (\n          <>\n            <Button\n              onClick={() => {\n                copy(output);\n                window.alert('클립보드에 복사되었습니다.');\n              }}\n            >\n              복사\n            </Button>{' '}\n            <Button onClick={() => (window.location.href = output)}>\n              이동하기\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useLayoutEffect, useMemo, useState } from 'react';\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport { Space, Tag, Divider, Button } from 'antd';\n\nimport { CardView, ListView } from './views';\nimport { GeneratePage } from './GeneratePage';\nimport './App.css';\n\nconst params = new URLSearchParams(window.location.search);\nconst key = params.get('key') ?? 'AIzaSyCVFJD2CdbZlE6TxlYvVWFMe3OXX03AKBE';\nconst id = params.get('id');\nconst viewParam = params.get('view') ?? 'card';\n\nconst colorSets = [\n  'red',\n  'gold',\n  'green',\n  'blue',\n  'purple',\n  'magenta',\n  'orange',\n  'lime',\n  'cyan',\n  'volcano',\n  'geekblue',\n];\n\nfunction App() {\n  const [title, setTitle] = useState<string>('');\n  const [headers, setHeaders] = useState<string[]>([]);\n  const [dataRows, setDataRows] = useState<Record<string, string>[]>([]);\n  const [filters, setFilters] = useState<Record<string, string>[]>([]);\n  const [view, setView] = useState<'card' | 'list'>(viewParam as any);\n\n  const init = useCallback(async () => {\n    if (!id) {\n      return;\n    }\n\n    const docs = new GoogleSpreadsheet(id);\n    docs.useApiKey(key);\n    await docs.loadInfo();\n    document.title = docs.title;\n    setTitle(docs.title);\n\n    const sheet = docs.sheetsByIndex[0];\n    const rows = await sheet.getRows();\n\n    const headerValues = sheet.headerValues;\n    setHeaders(headerValues);\n    setDataRows(\n      rows.map((row) => {\n        const result: Record<string, string> = {};\n\n        headerValues.forEach((header) => {\n          result[header] = row[header];\n        });\n        return result;\n      })\n    );\n  }, []);\n\n  useLayoutEffect(() => {\n    init().catch((e) => {\n      window.alert('ID나 KEY에 문제가 있습니다. 다시 확인해주세요.');\n      window.location.href = `${window.location.origin}${window.location.pathname}`;\n    });\n  }, [init]);\n\n  const filteredHeaders = useMemo(() => {\n    return headers.filter(\n      (header) => header !== '' && header !== 'name' && header !== 'link'\n    );\n  }, [headers]);\n\n  const headerColors = useMemo(() => {\n    return filteredHeaders.reduce((prev, header, index) => {\n      prev[header] = colorSets[index];\n      return prev;\n    }, {} as Record<string, string>);\n  }, [filteredHeaders]);\n\n  const appendFilter = useCallback(\n    (key: string, value: string) => {\n      const isDuplicate = filters.some((filter) => {\n        const [targetKey, targetValue] = Object.entries(filter)[0];\n        return targetKey === key && targetValue === value;\n      });\n\n      if (isDuplicate) {\n        return;\n      }\n\n      setFilters([...filters, { [key]: value }]);\n    },\n    [filters]\n  );\n\n  const removeFilter = useCallback(\n    (key: string, value: string) => {\n      setFilters(\n        filters.filter((filter) => {\n          const [targetKey, targetValue] = Object.entries(filter)[0];\n          return !(targetKey === key && targetValue === value);\n        })\n      );\n    },\n    [filters]\n  );\n\n  const filteredDataRow = useMemo(() => {\n    if (!filters.length) {\n      return dataRows;\n    }\n\n    return dataRows.filter((dataRow) => {\n      return filters.every((filter) => {\n        const [filterKey, filterValue] = Object.entries(filter)[0];\n        return dataRow[filterKey] === filterValue;\n      });\n    });\n  }, [dataRows, filters]);\n\n  const toggleView = useCallback(() => {\n    setView(view === 'card' ? 'list' : 'card');\n  }, [view]);\n\n  // const headerOptions = useMemo(() => {\n  //   return filteredHeaders.reduce((prev, header) => {\n  //     prev[header] = dataRows\n  //       .map((dataRow) => dataRow[header])\n  //       .filter((data, index, origin) => origin.indexOf(data) === index);\n  //     prev[header].push('ALL');\n  //     return prev;\n  //   }, {} as Record<string, string[]>);\n  // }, [filteredHeaders, dataRows]);\n\n  if (!id || !key) {\n    return <GeneratePage />;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>{title}</h1>\n      </div>\n      <div className=\"actions\">\n        <Button onClick={toggleView}>\n          {view === 'card' ? '리스트뷰' : '카드뷰'}\n        </Button>\n      </div>\n      <div className=\"filters\">\n        <Space wrap>\n          {!!filters.length && <br />}\n          {filters.map((filter) => {\n            const [key, value] = Object.entries(filter)[0];\n            return (\n              <Tag\n                key={`${key}-${value}`}\n                closable\n                color={headerColors[key]}\n                onClose={() => removeFilter(key, value)}\n              >\n                {value}\n              </Tag>\n            );\n          })}\n        </Space>\n      </div>\n      <Divider></Divider>\n      <div className=\"contents\">\n        {view === 'card' ? (\n          <CardView\n            dataRows={filteredDataRow}\n            headerColors={headerColors}\n            appendFilter={appendFilter}\n          />\n        ) : (\n          <ListView\n            dataRows={filteredDataRow}\n            headerColors={headerColors}\n            appendFilter={appendFilter}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}