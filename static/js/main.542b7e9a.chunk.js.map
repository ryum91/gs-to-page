{"version":3,"sources":["GeneratePage.tsx","App.tsx","index.tsx"],"names":["GeneratePage","useState","id","setId","key","setKey","output","setOutput","handleClick","useCallback","inputId","inputKey","window","location","href","btoa","JSON","stringify","parse","alert","e","className","value","onChange","target","placeholder","TextArea","rows","style","width","onClick","copy","params","URLSearchParams","search","get","colorSets","App","title","setTitle","headers","setHeaders","dataRows","setDataRows","init","a","resKey","atob","docs","GoogleSpreadsheet","useServiceAccountAuth","loadInfo","document","sheet","sheetsByIndex","getRows","headerValues","map","row","result","forEach","header","useLayoutEffect","catch","origin","pathname","filteredHeaders","useMemo","filter","headerColors","reduce","prev","index","wrap","data","name","actions","PlayCircleOutlined","link","CopyOutlined","Object","keys","undefined","categoryKey","color","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.542b7e9a.chunk.js","sourcesContent":["import { Input, Button } from 'antd';\nimport copy from 'copy-to-clipboard';\nimport { useCallback, useState } from 'react';\n\nexport const GeneratePage = () => {\n  const [id, setId] = useState<string>('');\n  const [key, setKey] = useState<string>('');\n\n  const [output, setOutput] = useState<string>('');\n\n  const handleClick = useCallback((inputId: string, inputKey: string) => {\n    try {\n      setOutput(\n        `${window.location.href}?id=${inputId}&key=${btoa(\n          JSON.stringify(JSON.parse(inputKey))\n        )}`\n      );\n      window.alert('생성되었습니다.');\n    } catch (e) {\n      window.alert('값이 입력되지 않았거나, 잘못되었습니다.');\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Google SpreadSheet 페이지 만들기</h1>\n      </div>\n      <div className=\"contents\">\n        <Input\n          value={id}\n          onChange={(e) => setId(e.target.value)}\n          placeholder=\"Google SpreadSheet ID\"\n        ></Input>\n        <br />\n        <br />\n        <Input.TextArea\n          value={key}\n          onChange={(e) => setKey(e.target.value)}\n          placeholder=\"JSON Key\"\n          rows={10}\n        ></Input.TextArea>\n        <br />키 발급:{' '}\n        <a href=\"https://console.cloud.google.com/apis/credentials\">\n          Google Cloud Platform\n        </a>\n        <br />\n        <br />\n        <Button style={{ width: '100%' }} onClick={() => handleClick(id, key)}>\n          생성\n        </Button>\n        <br />\n        <br />\n        {!!output && (\n          <>\n            <Button\n              onClick={() => {\n                copy(output);\n                window.alert('클립보드에 복사되었습니다.');\n              }}\n            >\n              복사\n            </Button>{' '}\n            <Button onClick={() => (window.location.href = output)}>\n              이동하기\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useLayoutEffect, useMemo, useState } from 'react';\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport { Space, Card, Tag } from 'antd';\nimport { CopyOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport copy from 'copy-to-clipboard';\n\nimport { GeneratePage } from './GeneratePage';\nimport './App.css';\n\nconst params = new URLSearchParams(window.location.search);\nconst key = params.get('key');\nconst id = params.get('id');\n\nconst colorSets = [\n  'red',\n  'gold',\n  'green',\n  'blue',\n  'purple',\n  'magenta',\n  'orange',\n  'lime',\n  'cyan',\n  'volcano',\n  'geekblue',\n];\n\nfunction App() {\n  const [title, setTitle] = useState<string>('');\n  const [headers, setHeaders] = useState<string[]>([]);\n  const [dataRows, setDataRows] = useState<Record<string, string>[]>([]);\n\n  const init = useCallback(async () => {\n    if (!id) {\n      return;\n    }\n\n    if (!key) {\n      return;\n    }\n\n    const resKey = JSON.parse(atob(key));\n    const docs = new GoogleSpreadsheet(id);\n    await docs.useServiceAccountAuth(resKey);\n    await docs.loadInfo();\n    document.title = docs.title;\n    setTitle(docs.title);\n\n    const sheet = docs.sheetsByIndex[0];\n    const rows = await sheet.getRows();\n\n    const headerValues = sheet.headerValues;\n    setHeaders(headerValues);\n    setDataRows(\n      rows.map((row) => {\n        const result: Record<string, string> = {};\n\n        headerValues.forEach((header) => {\n          result[header] = row[header];\n        });\n        return result;\n      })\n    );\n  }, []);\n\n  useLayoutEffect(() => {\n    init().catch((e) => {\n      window.alert('ID나 KEY에 문제가 있습니다. 확인해주세요.');\n      window.location.href = `${window.location.origin}${window.location.pathname}`;\n    });\n  }, [init]);\n\n  const filteredHeaders = useMemo(() => {\n    return headers.filter(\n      (header) => header !== '' && header !== 'name' && header !== 'link'\n    );\n  }, [headers]);\n\n  const headerColors = useMemo(() => {\n    return filteredHeaders.reduce((prev, header, index) => {\n      prev[header] = colorSets[index];\n      return prev;\n    }, {} as Record<string, string>);\n  }, [filteredHeaders]);\n\n  // const headerOptions = useMemo(() => {\n  //   return filteredHeaders.reduce((prev, header) => {\n  //     prev[header] = dataRows\n  //       .map((dataRow) => dataRow[header])\n  //       .filter((data, index, origin) => {\n  //         return origin.indexOf(data) === index;\n  //       });\n  //     return prev;\n  //   }, {} as Record<string, string[]>);\n  // }, [filteredHeaders, dataRows]);\n\n  if (!id || !key) {\n    return <GeneratePage />;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>{title}</h1>\n      </div>\n      {/* <div className=\"filters\">\n        {filteredHeaders.map((header) => {\n          return (\n            <Select key={header}>\n              {headerOptions[header]?.map((value, index) => {\n                return (\n                  <Select.Option key={`${value}-${index}`} value={value}>\n                    {value}\n                  </Select.Option>\n                );\n              })}\n            </Select>\n          );\n        })}\n      </div> */}\n      <div className=\"contents\">\n        <Space wrap>\n          {dataRows?.map((data, index) => {\n            return (\n              <Card\n                key={index}\n                title={data.name}\n                actions={[\n                  <PlayCircleOutlined\n                    key=\"이동\"\n                    onClick={() => {\n                      window.location.href = data.link;\n                    }}\n                  />,\n                  <CopyOutlined\n                    key=\"복사\"\n                    onClick={() => {\n                      copy(data.link);\n                      window.alert(`복사되었습니다.\\n\\n${data.link}`);\n                    }}\n                  />,\n                ]}\n              >\n                {Object.keys(data)\n                  .filter(\n                    (key) =>\n                      key !== '' &&\n                      key !== 'name' &&\n                      key !== 'link' &&\n                      data[key] !== undefined\n                  )\n                  .map((categoryKey) => {\n                    return (\n                      <p key={categoryKey}>\n                        <Tag color={headerColors[categoryKey]}>\n                          {data[categoryKey]}\n                        </Tag>\n                      </p>\n                    );\n                  })}\n              </Card>\n            );\n          })}\n        </Space>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}